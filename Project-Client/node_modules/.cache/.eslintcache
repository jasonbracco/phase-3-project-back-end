[{"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/index.js":"1","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/App.js":"2","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/NavBar.js":"3","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/ShoeForm.js":"4","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/Homepage.js":"5","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/ShoeList.js":"6","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/ShoeCard.js":"7","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/EditShoe.js":"8","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/BrandList.js":"9","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/BrandItem.js":"10"},{"size":285,"mtime":1664416472017,"results":"11","hashOfConfig":"12"},{"size":2084,"mtime":1665262418484,"results":"13","hashOfConfig":"12"},{"size":1061,"mtime":1665261383863,"results":"14","hashOfConfig":"12"},{"size":4628,"mtime":1665262729793,"results":"15","hashOfConfig":"12"},{"size":274,"mtime":1664422241725,"results":"16","hashOfConfig":"12"},{"size":406,"mtime":1665020957594,"results":"17","hashOfConfig":"12"},{"size":2558,"mtime":1665261901809,"results":"18","hashOfConfig":"12"},{"size":2492,"mtime":1665261068445,"results":"19","hashOfConfig":"12"},{"size":408,"mtime":1665529235000,"results":"20","hashOfConfig":"12"},{"size":585,"mtime":1665529224835,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"7z8lau",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/index.js",[],[],[],"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/App.js",[],[],"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/NavBar.js",[],[],"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/ShoeForm.js",["56","57"],[],"import React, {useState} from 'react'\nimport Select from 'react-select';\n\n\nfunction ShoeForm({onAddShoe, brands, onAddBrand}){\n\n  const [nickname, setNickname] = useState(\"\")\n  const [size, setSize] = useState(\"\")\n  const [color, setColor] = useState(\"\")\n  const [price, setPrice] = useState(\"\")\n  const [image, setImage] = useState(\"\")\n  const [use, setUse] = useState(\"\")\n  const [newBrand, setNewBrand]=useState(\"\")\n  const [brandID, setBrandID]=useState()\n\n  function handleBrandSubmit(event){\n    event.preventDefault()\n    if (newBrand == \"\"){\n      console.log(\"Nothing New!\")}\n    else{\n      fetch(`http://localhost:9292/brands`,{\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        brand_name: newBrand\n      }),\n    })\n      .then(response => response.json())\n      .then((brand) => {\n        onAddBrand(brand);\n        setNewBrand(\"\");\n      })\n  } \n}\n\n  function handleShoeSubmit(event){\n    event.preventDefault()\n\n    fetch(`http://localhost:9292/brands/${brandID}/shoes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        nickname: nickname,\n        brand_id: brandID,\n        size: size,\n        color: color,\n        price: price,\n        image_url: image,\n        use: use\n      }),\n    })\n      .then(response => response.json())\n      .then((newShoe) => {\n        onAddShoe(newShoe);\n        setBrandID();\n        setNickname(\"\");\n        setSize(\"\");\n        setColor(\"\");\n        setPrice(\"\");\n        setImage(\"\");\n        setUse(\"\");\n      })\n    }\n\n    return(\n      <div>\n        <div className=\"brand_select\">\n          <form className=\"brand_form\" onSubmit={handleBrandSubmit}>\n            <h3>Add a shoe to your collection!</h3>\n            <p>First, select the brand for your new shoe, or create a new one:</p>\n            Brand: \n              <select onChange={(event) => setBrandID(event.target.value)}>\n                <option>Select</option>\n                  {brands.map((brand) => (\n                    <option key={brand.id} value={brand.id}>{brand.brand_name}</option>\n                  ))}\n              </select>\n              <br />\n              Create new brand:\n              <input\n                type=\"text\"\n                name=\"new_brand\"\n                value={newBrand}\n                onChange={(event) => setNewBrand(event.target.value)}\n                placeholder=\"New Brand\"\n                className=\"input-text\"\n              />\n              <br />\n            <button type=\"submit\">Add/Create Brand</button>\n          </form>\n        </div>\n        <br />\n        Now, put in the attributes:\n        <br />\n        <br />\n        <div className=\"new_shoe_form\">\n          <form className=\"add_shoe_form\" onSubmit={handleShoeSubmit}>\n            <input\n              type=\"text\"\n              name=\"nickname\"\n              value={nickname}\n              onChange={(event) => setNickname(event.target.value)}\n              placeholder=\"Nickname\"\n              className=\"input-text\"\n            />\n            <br />\n            <input\n              type=\"text\"\n              name=\"size\"\n              value={size}\n              onChange={(event) => setSize(event.target.value)}\n              placeholder=\"Size\"\n              className=\"input-text\"\n            />\n            <br />\n            <input\n              type=\"text\"\n              name=\"color\"\n              value={color}\n              onChange={(event) => setColor(event.target.value)}\n              placeholder=\"Color\"\n              className=\"input-text\"\n            />\n            <br />\n            <input\n              type=\"text\"\n              name=\"price\"\n              value={price}\n              onChange={(event) => setPrice(event.target.value)}\n              placeholder=\"Price\"\n              className=\"input-text\"\n            />\n            <br />\n            <input\n              type=\"text\"\n              name=\"image\"\n              value={image}\n              onChange={(event) => setImage(event.target.value)}\n              placeholder=\"Image URL\"\n              className=\"input-text\"\n            />\n            <br />\n            <input\n              type=\"text\"\n              name=\"use\"\n              value={use}\n              onChange={(event) => setUse(event.target.value)}\n              placeholder=\"Use\"\n              className=\"input-text\"\n            />\n            <br />\n            <br />\n            <button type=\"submit\">Add Shoe!</button>\n          </form>\n        </div>\n      </div>\n    );\n}\n\nexport default ShoeForm","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/Homepage.js",[],[],"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/ShoeList.js",[],[],"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/ShoeCard.js",["58"],[],"import React, {useState} from \"react\"\nimport EditShoe from \"./EditShoe\"\nimport \"../index.css\"\n\nfunction ShoeCard({shoe, shoeUpdate, onShoeDelete}){\n    \n    const {id, brand_id, nickname, color, price, size, image_url, use} = shoe\n\n    const [isEditing, setIsEditing] = useState(false);\n\n    function handleUpdateShoe(updatedShoe){\n        setIsEditing(false)\n        shoeUpdate(updatedShoe)\n    }\n\n    function handleDeleteShoeClick() {\n        fetch(`http://localhost:9292/shoes/${id}`, {\n          method: \"DELETE\",\n        });\n        onShoeDelete(id);\n    }\n\n    return(\n        <div className=\"shoe_card\">\n            <div>\n                {isEditing ? (\n                    <EditShoe id={id} nickname={nickname} size={size} color={color} price={price} image_url={image_url} onUpdateShoe={handleUpdateShoe} use={use}/>\n                ) : \n                (\n                <div>\n                <img src={image_url} alt={nickname} className=\"shoe_image\"/>\n                <div className=\"card_content\">\n                    <h4>{nickname}</h4>\n                    <p>Size {size}</p>\n                    <p>Color: {color}</p>\n                    <p>Price: ${price}</p>\n                    <p>Type: {use}</p>\n                </div>\n                </div>\n                )}\n            </div>\n            <div className=\"button_container\">\n                <div className=\"edit_button\">\n                    <button onClick={() => setIsEditing((isEditing) => !isEditing)}>\n                        {isEditing ? ( \n                            <p> Go Back</p>\n                        ) : \n                        (\n                        <div>\n                            <span role=\"img\" aria-label=\"edit\">\n                                ✏️\n                            </span>\n                            <p>Edit This Shoe</p>\n                        </div>\n                        )}\n                    </button>\n                </div>\n                <div className=\"delete_button\">\n                    {isEditing ? (\n                        null\n                    ) : \n                    (\n                    <button onClick={handleDeleteShoeClick}>\n                        <div>\n                            <span role=\"img\" aria-label=\"delete\">\n                                🗑\n                            </span>\n                            <p>Delete This Shoe</p>\n                        </div>\n                    </button>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ShoeCard","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/EditShoe.js",["59"],[],"import React, {useState} from \"react\";\n\nfunction EditShoe({id, color, price, size, nickname, image_url, onUpdateShoe, use}){\n\n    const [nicknameChange, setNicknameChange] = useState(nickname)\n    const [sizeChange, setSizeChange] = useState(size)\n    const [colorChange, setColorChange] = useState(color)\n    const [priceChange, setPriceChange] = useState(price)\n    const [imageChange, setImageChange] = useState(image_url)\n    const [useChange, setUseChange] = useState(use)\n\n    function handleFormSubmit(event) {\n        event.preventDefault();\n    \n        fetch(`http://localhost:9292/shoes/${id}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            nickname: nicknameChange,\n            size: sizeChange,\n            color: colorChange,\n            price: priceChange,\n            image_url: imageChange,\n            use: use,\n          }),\n        })\n          .then(response => response.json())\n          .then((updatedShoe) => onUpdateShoe(updatedShoe));\n    }\n\n    return(\n        <form className=\"change_shoe\" onSubmit={handleFormSubmit}>\n            <input\n                type=\"text\"\n                name=\"Nickname\"\n                value={nicknameChange}\n                onChange={(event) => setNicknameChange(event.target.value)}\n            />\n            <input\n                type=\"text\"\n                name=\"Size\"\n                value={sizeChange}\n                onChange={(event) => setSizeChange(event.target.value)}\n            />\n            <input\n                type=\"text\"\n                name=\"Color\"\n                value={colorChange}\n                onChange={(event) => setColorChange(event.target.value)}\n            />\n            <input\n                type=\"text\"\n                name=\"Price\"\n                value={priceChange}\n                onChange={(event) => setPriceChange(event.target.value)}\n            />\n            <input\n                type=\"text\"\n                name=\"Image\"\n                value={imageChange}\n                onChange={(event) => setImageChange(event.target.value)}\n            />\n            <input\n                type=\"text\"\n                name=\"Use\"\n                value={use}\n                onChange={(event) => setUseChange(event.target.value)}\n            />\n            <div>\n                <input type=\"submit\" value=\"Update\" />\n            </div>\n        </form>\n    )\n}\n\nexport default EditShoe\n","/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/BrandList.js",[],[],"/Users/JasonBracco/Development/code/phase-3/phase-3-project-back-end/Project-Client/src/Components/BrandItem.js",[],[],{"ruleId":"60","severity":1,"message":"61","line":2,"column":8,"nodeType":"62","messageId":"63","endLine":2,"endColumn":14},{"ruleId":"64","severity":1,"message":"65","line":18,"column":18,"nodeType":"66","messageId":"67","endLine":18,"endColumn":20},{"ruleId":"60","severity":1,"message":"68","line":7,"column":16,"nodeType":"62","messageId":"63","endLine":7,"endColumn":24},{"ruleId":"60","severity":1,"message":"69","line":10,"column":12,"nodeType":"62","messageId":"63","endLine":10,"endColumn":21},"no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'brand_id' is assigned a value but never used.","'useChange' is assigned a value but never used."]